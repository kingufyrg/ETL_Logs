import timefrom os.path import joinimport loggingimport numpy as npimport pandas as pdprint(pd.set_option("display.max_columns",None))print(pd.set_option("display.width",None))try:    # Define el archivo a abrir con la ruta completa.    file = open("/Users/yair/Library/Mobile Documents/com~apple~CloudDocs/Logs Betstone/L06062022.log")    # Defino la ruta de destino    dest = "/Users/yair/Downloads"    # Define una lista vacía para llenarla con la info del log    datos = []    # Crea una lista con cada una de las líneas leídas en el log    datos = file.readlines()    # Define un Dataframe principal en el cual se empezará a incluir la información    dflist = pd.DataFrame()    dflist2 = pd.DataFrame()    print("El archivo log " + file.name + " tiene: " + str(len(datos)) + " filas")    # Búsqueda de las siguientes palabras clave en el log    palabra = ["AFT Cashless In","AFT Cashless Out","Begin transaction","Bet amount","Result: Lost","Result: Won",               "Cashin ", "Cashout finished","Payout of mystery bonus award finished."]    # Excluye las siguientes palabras clave de la búsqueda    exclude = ["Result: Success",'113','3']    # Comienza a contar el tiempo de ejecución    start = time.time()    # Define los nombres de la columna del DataFrame    # **************    # Agregar columna nombre log - EGM    # **************    columnas = ['Index','Time','Balance','Sep','Event Code','Description','Description2','Column6']    # Itera por cada linea en el log    for i in range(len(datos)):        # Itera por cada palabra clave a buscar        for j in palabra:            # Si la encuentra entonces...            if j in datos[i]:                # Toma la línea i-ésima de la iteración principal y la separa en cadenas str delimitadas por '|'                x = datos[i].split('|')                # x = x[i].split(sep='Amount: ',maxsplit=1)                # Agrega al Dataframe constructor la línea obtenida.                df = pd.DataFrame(x).transpose()                # Junta el Dataframe principal y el obtenido de cada línea.                dflist = pd.concat([dflist,df],ignore_index=False)    # Nombra el encabezado con la lista "columnas"    dflist.columns = columnas  # !!!!!!!!!!!!considerar al final    # Define el index tal cual como está en el log    dflist.index = dflist.loc[0:,'Index']    # Cambia el tipo de dato del index a número entero    # *******************    dflist.loc[:,'Index'] = dflist.loc[:,'Index'].apply(lambda x: int(x))    # Cambia el balance a tipo de dato moneda    dflist.loc[:,'Balance'] = dflist.loc[:,'Balance'].apply(lambda x: float(str(x).replace("$","").replace(" ","").                                                                            replace(",","")))    # Cambia el tipo de dato a str    dflist.loc[:,'Event Code'] = dflist.loc[:,'Event Code'].astype(str)    # Incluye en el Dataframe final únicamente las siguientes columnas    dflist = dflist.loc[:,['Event Code','Time','Balance','Description','Description2']]    # Vista previa de la información obtenida    dflist.insert(0,"logname","L06062022.log")    dflist.insert(0,"EGM","BMXTEST001")    print("*" * 20)    dflist.insert(len(dflist.columns),"Main Event",dflist.loc[:,'Description'])    dflist.loc[:,'Main Event'] = dflist.loc[:,'Main Event'].apply(                                                            lambda x: "Start Session" if ("Cashin" in x) else x)    #  AFT Cashless In    dflist.loc[:,'Main Event'] = dflist.loc[:,'Main Event'].apply(                                                            lambda x: "Start Game" if ("AFT Cashless In" in x) else x)    #  AFT Cashless Out    dflist.loc[:,'Main Event'] = dflist.loc[:,'Main Event'].apply(                                                            lambda x: "End Game" if ("AFT Cashless Out" in x) else x)    dflist.loc[:,'Main Event'] = dflist.loc[:,'Main Event'].apply(                                                            lambda x: "End Session" if ("Cashout" in x) else x)# Cashout    dflist.loc[:,'Main Event'] = dflist.loc[:,'Main Event'].apply(                                                            lambda x: "Bet" if ("Bet amount" in x) else x)    dflist.loc[:,'Main Event'] = dflist.loc[:,'Main Event'].apply(                                                            lambda x: "Lost" if ("Result: Lost" in x) else x)    dflist.loc[:,'Main Event'] = dflist.loc[:,'Main Event'].apply(                                                            lambda x: "Win" if ("Result: Won" in x) else x)    dflist.loc[:,'Main Event'] = dflist.loc[:,'Main Event'].apply(                                            lambda x: x[:int(x.index(":"))-1] if ("Begin transaction" in x) else x)    dflist.insert(len(dflist.columns),"Main Event2",dflist.loc[:,'Description'])    dflist.loc[:,'Main Event2'] = dflist.loc[:,'Main Event2'].apply(                                            lambda x: x[int(x.index("$"))+1:int(x.index("$"))+100]                                            if ("$" in x) else x)    dflist.loc[:,'Main Event2'] = dflist.loc[:,'Main Event2'].apply(                                            lambda x: str(x).replace(". ","").replace(" ","").replace("$",""))    dflist.loc[:,'Main Event2'] = dflist.loc[:,'Main Event2'].apply(                                            lambda x: "" if (":" in x) else x)    dflist.insert(len(dflist.columns),"Main Event3",dflist.loc[:,'Description2'].shift(-1))    dflist.loc[~(dflist['Main Event2'] == ''),'Main Event3'] = dflist['Main Event2']    dflist.pop('Main Event2')    dflist.pop('Description')    dflist.pop('Description2')    dflist.loc[:,'Main Event'] = dflist.loc[:,'Main Event'].apply(        lambda x: str(x).replace(" ","",1))    dflist.loc[:,'Main Event3'] = dflist.loc[:,'Main Event3'].apply(                                            lambda x: "" if ("successfully" in x) else x)    dflist.loc[:,'Main Event3'] = dflist.loc[:,'Main Event3'].apply(                                            lambda x: "Mystery Payout"                                            if ("Payoutofmysterybonusawardfinished" in x) else x)    # dflist.loc[:,'Main Event3'] = dflist.loc[:,'Main Event3'].apply(    #                                        lambda x: "" if ("Freespin" in x) else x)    print(dflist)    dffinal = pd.DataFrame(columns=['Index','EGM','logname','Event Code','Event','Time','Time End','Spin Time',                                    'Balance','Game','Bet','Result','Num Lines','Num Coins','CoinSize','Spin type'])    i = 0    j = 0    print("*"*100)    for i,j in dflist.iterrows():        for column in dflist.columns:            dffinal.loc[i,column] = j.loc[column]    matrix = dffinal.to_numpy()    print("*"*100)    for fila,columna in enumerate(matrix):        if matrix[fila,16] == "StartSession":            matrix[fila,4] = "StartSession"        elif matrix[fila,16] == "StartGame":            matrix[fila,4] = "StartGame"        else:            matrix[fila,4] = "Spin"        print(matrix[fila,4])    print("+"*100)    for fila,columna in enumerate(matrix):        if np.char.startswith(str(matrix[fila,17]).lstrip(),"Num"):            matrix[fila,9] = matrix[fila,16]            matrix[fila,10] = str(matrix[fila + 1,17])            matrix[fila,11] = str(matrix[fila + 2,17])            matrix[fila,12] = str(matrix[fila,17])[11:12]            matrix[fila,13] = str(matrix[fila,17])[24:25]            matrix[fila,14] = str(matrix[fila,17])[37:38]        else:            matrix[fila,10] = ""            matrix[fila,11] = ""            matrix[fila,12] = ""            matrix[fila,13] = ""            matrix[fila,14] = ""    # for i,j in enumerate(matrix):    #    if not np.char(matrix[fila,9]):    #        matrix.    print(matrix)    matrix.tofile()    # print(matrix[1,1])    dffinal.loc[:,['Index','EGM','logname','Event Code','Event','Time','Time End','Spin Time',                                    'Balance','Game','Bet','Result','Num Lines','Num Coins','CoinSize'                   ]].to_csv(join(dest,"test.csv"),header=True,index=True,encoding='utf-8')    # Construye archivo .csv listo para subir a Bigquery    # *** Nota ***    # Se debe separar la descripción e incluir identificadores de cada evento para seguimiento cronología más sencillo    dflist.to_csv(join(dest,"log_procesado.csv"),header=True,index=True,encoding='utf-8')    #    df2 = pd.DataFrame(x).transpose()    # Junta el Dataframe principal y el obtenido de cada línea.    #    dflist = pd.concat([dflist,df],ignore_index=False)    # Agrega al Dataframe constructor la línea obtenida.    #  df1 = pd.DataFrame(x).transpose()    # Junta el Dataframe principal y el obtenido de cada línea.    #  dflist2 = pd.concat([df,df1],ignore_index=True)    # print(dflist2)    # Vista previa del Dataframe final    # print(dflist)    # Final del conteo de tiempo que tomó en completar la tarea    print("*" * 100)    end = time.time()    print("The time used to execute this is given below")    print(str(round((end - start) / 60,2)) + " minutos.")# Se define las excepciones para los posibles errores que puedan ocurrir durante el ETLexcept Exception as error:    print("Error en ejecución de ETL_logs")    # Imprime la causa del error    print(error.__cause__)    logging.exception(str(error))    print(error.with_traceback(error.__traceback__))print("--------- \tTerminado \t---------")